<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAA47AAAOOwAAAAAAAAAA
        AAAAAAAAAAAAAEJCQgBCQkIAQkJCAEJCQgBCQkIAQkJCAMjIyADt7e0A9fX1AXx8fARMTEwEQ0NDA0ND
        QwA/Pz8AQkJCAAAAAAD///8A8/PzAP///wD///8BwMDAA35+fgRlZWUEVVVVBExMTARGRkYDQ0NDA0JC
        QgJCQkIBQkJCAAAAAAAAAAAAPkRMAEFCQgFDREUAPD9DVk1PUaM+P0FwHR4ePwAAABc4OToBg4eIACss
        KwEyMzIAJSclMTAxMFkiIyJADQ0NLgAAAB0BAQEPAAAAAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAABhgswBEQT4CAAAAAAAAABt2cWvzv7q0/6impP6Sk5P/fX6A9Wdp
        bNBRU1WiOTo8Zx0fHlZ6eXrzoaCh/5WUlf6Ojo7/hYaF+X1+fex0dXTdamxqy2FiYbdWWFahS01Liz9A
        P3QwMTBeHx8fSQUGBTQNDQ0kSkpKDlJSUgAAAAAAEWXDAEBDRwMvKygAMy8rSFBohf+XtNf4usLM+9XS
        0P3g2dD/29TL/8nFv/+6ubb/eXd5/4KGgv7Izsj7ysvK/dXT1f/c2Nz/4Nvh/+Ld4v/h3OH/3dne/9jU
        2P/RzdH/yMbI/769vv+zsrP/rq+u/IaGhf88PTyNODc4AAAAAAARZ8YAFWC3BBhgsAAaXqt7Bmfi/wBq
        9PsJcOv/JXzk/0uO3v55pdv9pLzZ+9zh6/uiq6D9LFoq/j+DO/9FhkH/T4tM/1uRWP5qmWf+eqN3/Yut
        ifyduZv8sMWv+8PSwvvV39T75evl+/L08vz////6wL/A/zAsMHsoJCgAAAAAABJkwAAGbeMDBmzhAAxo
        0a8Fb+n/AXHx/ABu8f8Aa/L/AGjy/wBn8f8Aaev/DXT2/zF3jv9AWDD/NIAz/zKALv8wfiv/LX0p/yt8
        J/8qeiX/KXol/yl6Jf8reif/L3wr/zR+MP88gzj/RYhC/1aUU/xRhU7/NWYyu1L/RgMAAAAAEGfHASVY
        iwAhW5YFDWrQ2wxq0f8Ac/T9AnLu/wRz8f8FdPP/BHX1/wJ09f8AdP//I2mJ/0RYMf85iDn/OoU2/zqF
        N/87hTf/O4U3/zuFN/87hTf/OoU2/zmENf84gzT/NoIy/zSBMP8yfy3/Ln0q/S9+K/84eTTbN0s2Bhdo
        uAAPackCBnHjAAB18SQWZLf7FGa//wB4/P4Bdvn/AHDy/wBr6P8AZ97/AGLQ/wFhy/8wYGj/Q1w3/zuN
        Ov88hzj/PIg4/zyIOP87hzf/O4c3/zuHN/87hzf/OoY2/zqGNv86hjb/OoY2/zqGN/87hjf8OoQ3/zp4
        N8Y4hDQAE2zCAA1t0AMBdu4AA3XqUCdYif8ObdD8AHn9/yFfoP9OZHz/Xm6A/3B4gf+Cg4X/mZmS/1hm
        VP88Xzv/QJI8/z+KO/8/izv/P4s7/z6LOv8+ijr/Poo6/z2KOf89iTn/PYk5/z2JOf88iTj/PIg4/zyJ
        OPw8hjj/PHo5tDx+OQAyUG0AGmOsBB5gogAXZ7aDMk9s/wJ8+PsBaNH/g313/9PQy//Lzs7/0tbX/9XZ
        3P/X4d7/XGVc/zxlOv9Elj//Qo0+/0KOPv9Bjj3/QY49/0GNPf9BjT3/QI08/0CNPP9AjDz/QIw8/z+M
        O/8/izv/P4w7+z+IO/8/fDyfP308ABZsugBdKAACbxkAADFRb7UwUnT/AIP//Ahv1f9YXF//p5OK/7SP
        fP+xhW7/s3th/613U/9NSkP/QXJB/0aYQf9FkUH/RZJB/0SRQP9EkUD/RJFA/0SQQP9DkD//Q5A//0OQ
        P/9Cjz7/Qo8+/0KPPv9Cjz77QYo+/0F+PolBfT4AL1R3AQl23QAAjv8JQ0E+4CNfmP8Ahv/9JGCc/zk4
        NP+ETDD/vVkm/7NXKP+5WSj/rVws/0hCQf9FfUT/SZpE/0iURP9HlUP/R5RD/0eUQ/9HlEP/RpRC/0aT
        Qv9Gk0L/RpNC/0WSQf9FkkH/RZJB/0WTQftEjED/Q39Ac0N/QABCQkIDQ0E/AEBESEZFPzj/FG7B/gCI
        //8rWob/Pzw3/4BVP//DZDT/uGI2/79kNf+nXjf/QkBC/0mHRv9LnEf/SpdH/0qYRv9KmEb/SpdG/0qX
        Rv9Jl0X/SZdF/0mWRf9JlkX/SJZE/0iVRP9IlUT/SJZE+0eNQ/9GgUNeRoBDAEJCQgNHPTUAQ0FArEBE
        R/8Je+H8AIj//x1pr/8+Ozf/dVE//8ZlM/+6YjT/xmUz/5hYOP88QkP/TpBJ/06fSv9Nm0n/TZtJ/02b
        Sf9Nm0n/TJpI/0yaSP9Mmkj/TJlI/0uZR/9LmUf/S5lH/0uYR/9LmUb8SY9G/0iCRUhIgUUAQkJCAD9F
        SyhEQDv5OE1f/wGE9v4Ah///EHbQ/zw+Pv9rTj7/yGY0/71jNf/LZzT/hFI7/zpFRP9SmUz/UaFN/1Ce
        TP9Qnkz/UJ5M/1CeTP9PnUv/T51L/0+dS/9PnUv/TpxK/06cSv9OnEr/TptK/02dSf5MkUj/SoNHNUqC
        RwBCQkIAQERHh0Y+N/8sWoD7AIv//wCH+v8Hguv/N0VP/2JJPP/JZzb/wmU2/81pNf9uTD7/PEtE/1Wh
        T/9Uo1D/U6JP/1OiT/9ToU//UqFO/1KhTv9SoE7/UqBO/1GgTf9RoE3/UZ9N/1GfTf9Qnkz+UJ9M/06S
        S/1Lg0kjS4NJAEJCQhFBQ0XgRz01/x9ppv4Ajv//AYf2/wCK/f8wT2n/WkU4/8doOf/IaDf/ymk3/1pF
        P/9AU0b/WKdT/1alUv9WpVL/VqVS/1akUv9VpFH/VaRR/1WkUf9Vo1H/VKNQ/1SjUP9UolD/VKJQ/1Oi
        T/5Tok//UJRN8U2BShRNgkoAQkJCTEFDRP9FPzr+EnnK/wCP//8CifX/AJD//yVdiv9TQTX/w2g7/9Br
        OP/BaDn/ST9A/0ZdR/9brVb/WahV/1moVf9ZqFX/WKhU/1inVP9Yp1T/WKdU/1emU/9XplP/V6ZT/1em
        U/9WpVL/VqVS/ValUv9TlU/iS3RKB0x6SwBCQ0OBQ0FA/z9FSfwHh+j/AI///wGL9/8Akv//HG2t/0s+
        Nf+9Zz3/2W44/7FkO/89OkH/TGdK/16zWv9cqlj/XKtY/1yrWP9bq1f/W6tX/1uqV/9bqlf/WqpW/1qp
        Vv9aqVb/WqlW/1moVf9ZqVX9WadV/1WWUdJizF0Aef9xAEFDRLhEPzv/NlBk/QCR/f8AkPz/AY75/wCT
        //8fe8L/Rz44/7RlPf/icjn/nF49/zY3Qf9Rck3/Ybdd/1+tW/9fr1v/X65b/16uWv9erlr/Xq1a/16t
        Wv9drVn/Xa1Z/12sWf9crFj/XKxY/1ysWPxbqVf/V5hTvlmfVQBZoVYCQUNF5kY9Nv8qX4X+AJf//wGR
        +v8Ckfr/AJT//yKF0v9IQT3/qWI+/+l1Ov+EWD//NTdA/1V9Uf9kumD/YbBd/2KyXv9hsV3/YbFd/2Gx
        Xf9hsV3/YLBc/2CwXP9gsFz/YLBc/1+vW/9fr1v/X7Bb+16qWv9ZmVWpWZpWAFqdVgRBQ0X/Rzw1/Rxy
        rv4AnP/9AZT8+wGU/fsAlf/9IY7h/k9HQ/+dXj3/63Y7/2dPQf85OED/XIpV/2q+Y/9ntGD/Z7Vg/2a1
        YP9mtGD/ZbRg/2SzX/9ks1//Y7Nf/2OzX/9isl7/YrJe/2KyXv9is177YKxc/1uaV5NbmlcAW51YBEFD
        RMtEPzz+Fnq++QSS8/8FkPD/A5P3/wCV//8alvD/W1BN/49YPP/yeT3/hFhA/y83Qf9TkFn/X7tm/1y0
        ZP9dt2T/Xrhk/2C4ZP9iuWT/Y7lj/2W4Y/9muGL/Z7hi/2e3Yv9ot2H/Z7Zh/mW4Yfdirl7/XJtZfFya
        WQBdnloEN0xiAUNCQDsmaZMrDobYQw+F1HoNh9qtB4nh2hmP4vpoW1f/hVQ7/+15Pv/dcz7/r2M//696
        R/+uiUz/oYtO/5aQUf+MlVT/gppX/3meWv9wo1z/aqde/2SqYP9grmL/XrBj/1yzZP9ftGT/Z7Ri+2Os
        YP9fnVtmXpxbAGCgXARCQkIBQkJCAEJCQgBRMysAGXm3AABw/wAAR38ERp/iHYpdSNV7Uz//7no//eJ2
        P//ueT//7XU9/+5zPf/udD3/7nQ9/+10Pf/rdT7/53c//+J4QP/bekL/031E/8mARv+/hEn+tIdL/5OK
        UORdo1+KYqNfsmKiXzxio18AYqNfA0BFSQBDQD8DH3CnAgqL4QMNhtkEEYrdA25ZUANZSUIAq2RAtHhU
        Qf/tej/85ndA/+V3QP/meED/5nlA/+Z5QP/neUH/6HpB/+l6QP/qeUD/7HlA/+55QP/weUD/8ng///R4
        P/30eD//2G0/1f//7QAAADIApnZHAV+gXABfoFwAAAAAAAAAAAANiNoADYfaAA2M3wBNg60AoWxUBMVi
        LQDEbUGeflZB/+d4QfvsekH/63pB/+t6Qf/sekH/7HpB/+x6Qf/se0H/7XtB/+17Qf/te0H/7XtC/+18
        Qv/tfEL/7XxC/e99Qv/UdELohmtIEQD//wCQhk8CYKBdAGChXQAAAAAAAAAAAAAAAAAAAAAAAAAAAOd4
        QADKb0EE2HRBANl0QYSLWkL/33ZB+/F8Qf/te0L/7nxC/u98Qv7wfEL98X1C/fJ9QvzyfUL7835C+/R+
        Qvv0fkL79H5D/fR+Q//zfkP+9H5D/9t2Q/iuZ0MfsmhDAMNvQwJipF8AYqRfAAAAAAAAAAAAAAAAAAAA
        AAAAAAAA4XZAANFyQgTpekIA6HpCbJ5hQv/YdEL3+4BD/PN+Q/30fkP/835D//F9Q//vfUP/7XxD/+t7
        Q//oekP/5npD/+N5Q//heEP/3ndD/9x2Q/badkPn1nRD1slwQyTLcUMAznJDAgAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAADreUEA03RDA953QwDieUM/xG5D/9NzQ/7mekP/33dD/953Q/7bdkPz2nZD49h1
        Q9DWdEO71XRDo9R0Q4vTc0Ny0nNDWdFzQ0LRckMt0XJDG9RzRAvkfUgB7rVCAJkARwDun0UAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAPF4PADPc0MA/4VEAf+ERADadkNI13VDbtByQ1DSc0M70XNDJ9Fz
        QxbWdEQHtmtBAMBuQgDjd0UAAAAAAAAAAAAAAAAAAAAAAAAAAAB4VEAAelVAAHNSPwCAV0AAgFdAAINY
        QAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAANh1QwDYdEMA23ZDAdVzQwDVdEMA03NDAAAA
        AABYQCwAynFCAMdwQgC+bUEBzHFCA9ByQwTTc0ME1XRDBNd1QwTZdUMD23ZDAt13QwLgeEMB43lEAOJ5
        RADkekQA4nlEAAAAAAAAAAAA0kFoAcgEBf/QAAABkAAAAZAAAAGQAAAAoAAAAKAAAAEgAAABIAAAASAA
        AAFAAAABQAAAAUAAAAGAAAABgAAAAQAAAAEAAAABAAAAAgAAAAIAAAACAAAAAgAAAAIAAAACVAAAAgEA
        ABrpAAAC+QAAC/0AAAv9AAAD/ICfS/0tAAs=
</value>
  </data>
</root>